#!/bin/bash
#
#  filename: loomaupdater
#       VERSION 3.0 for rysnc.net
#       author: skip
#       date:   JUL 2019
#
#  used to update a pre-installed Looma by installing new code, database & content
#
#   files to be updated may
#    - be on a USB stick at /media/odroid/LOOMA/loomaupdate (the "U" option)
#    - or, on  the Internet at rsync.net (the "I" option)
#
#   file structure expected if on the USB:
#
#       Looma/               (full set of new Looma code)
#       Looma/mongo-dump/dump/looma/   (latest mongodump of the new database content)
#       content/*   (folders with new content)
#                   (these are usually NEW folders,
#                      but this can be used to overwrite existing content folders)
#    possibly other content folders, like
#       maps2018/*
#       ePaath/*
#    or other content folders
#
#   steps performed:
#       sync new code files into existing Looma code
#          [or backup existing Looma code to LoomaBAK and replace fully with new code
#       use mongorestore to load new data into the existing mongo database
#       sync new content files into "content" directory

#RSYNC options used:
#-a  "archive" equivalent to -rlptgoD
#   -r  recursive
#   -l  recreate symlink on the destination
#   -p  preserve permissions
#   -t  preserve modification time
#   -g  preserve group
#   -o  preserve owner
#   -D  transfer devices and specials (NA for Looma)

#-v	    verbose
#-vv	very verbose
#-z  	use compression
#--dry-run
#--size-only [for Content files]
#--delete 	delete files on destination that are not on source
#--perms (=== -p)
#--update   skip files if destination  already exists and has a later date
#--include '.ssh'
#--exclude '.[!.]*'
#--progress show transfer progress
#--stats    print stats at the end
#
result () {
    if [[ $1 -ne 0 ]]
    then
        echo "****************************************************************"
        echo "ERROR: previous operation returned $1"
    else
        echo "****************************************************************"
        echo "operation successful"
    fi
}

#function to exec the rsync. $DRYRUNMODE is either "--dry-run" or ""
dosync () {
    FROM=$1
    TO=$2
echo "doing RSYNC from $FROM to $TO with parameter $DRYRUNMODE"

     rsync -az  $DRYRUNMODE --size-only --stats --progress   \
      --perms  --chmod=D755,F644 --chown=odroid:looma \
      --exclude '.[!.]*' --delete --delete-excluded   \
      -e "ssh"   \
      $FROM  $TO
}

#
echo
echo
echo "****************************************************************"
echo "START LOOMA UPDATE: updating Looma code, database and content"
echo "****************************************************************"
echo "this a DANGEROUS operation and can disable a Looma"
echo "Be sure you have read the instructions"
echo "****************************************************************"
echo

echo "****************************************************************"
echo "- Update using Internet connection or USB memory?"
echo -n  "- -enter  U for USB, I for internet [I/U]?"; read input

# set up user 'looma' and 'looma-admin' and group 'looma' in case not already present
groupadd looma
useradd -g looma looma
useradd -g looma looma-admin

if [[ $1 = "dryrun" ]]
  then
    DRYRUNMODE="--dry-run"
  else
    DRYRUNMODE=""
fi

#####################
##################### user input - choose update from USB stick or from Internet
#####################
if [[ $input = "U" ]]
then
##########################
# start of USB section
##########################

    echo "****************************************************************"
    echo "    you must insert a USB memory stick which is named LOOMA"
    echo "    be sure the USB filesystem format is FAT32 or exFAT    [*** not NTFS ***]"
    echo "    the USB stick must have the files to be uploaded stored in a top-level folder named 'loomaupdate' "
    echo "****************************************************************"

    cd /media/odroid/LOOMA/loomaupdate # for Linux (different for MAC)

    if [ "$?" -ne 0 ]
    then
        echo "ERROR: couldn't find LOOMA/loomaupdate directory on USB"
        exit 1
    fi

    echo
    echo -n  "- using this directory to get new files: ";pwd
    echo

    #       copy current Looma code to LoomaBAK
    echo "- preparing to backup current Looma code to LoomaBAK"
    echo "-   *** usually it is OK to skip this step to save time"
    echo -n  "- - continue ('n' recommended) [y/n]?"; read input;
    if [[ $input = "y" ]]
    then
        if [ -d /var/www/html/LoomaBAK ]
        then
          echo "- deleting old LoomaBAK directory"
          sudo rm -r /var/www/html/LoomaBAK
          result $?
        fi
        mv    /var/www/html/Looma   /var/www/html/LoomaBAk
        result $?
    else
        echo " - - - SKIPPED: backing up Looma code "
    fi

    #       install new Looma code
    echo
    echo "- preparing to install new Looma code"
    echo -n  "- - continue ('y' recommended) [y/n]?"; read input;
    if [[ $input = "y" ]]
    then
        #*************RSYNC*********************

        SECONDS=0

        dosync Looma/  /var/www/html/Looma

        echo "$(($SECONDS / 60)) minutes and $(($SECONDS % 60)) seconds elapsed."

        #clear browser cache so the new code files will be used
        source "/var/www/html/Looma/looma shell scripts/loomaClearChromiumCache"
    else
        echo " - - - SKIPPED: installing new Looma code"
    fi

    #       install new Looma database
    echo
    echo "****************************************************************"
    echo "- preparing to update Looma database"
    echo "-   ***note: this will NOT erase any lesson plans already in the database"
    echo -n  "- - continue ('y' recommended) [y/n]?"; read input;

    if [[ $input = "y" ]]
    then
        if [[ -d /media/odroid/LOOMA/loomaupdate/Looma/mongo-dump/dump/looma ]]
        then

            # [mongorestore doesnt update existing documents that have changes]
            # to fix this, we use the following procedure:
            #     temp save locally created documents (lessons and texts)
            #     update all documents to latest version from the looma archive
            #     then re-load the locally created documents
            # mongoexport collections 'lessons' and 'text_files' to temp files
            # drop db 'looma' so mongorestore from archives will update all documents in the db
            # mongorestore db looma dump from looma archive on USB
            # finally, mongoimport the temp files to collectons 'lessons' and 'text_files' to re-instate locally created lessons and texts

                mongoexport --db looma --collection lessons    --out /tmp/lessonsFromMongo.tmp
                # read -p "Press [Enter] to continue"
                mongoexport --db looma --collection text_files --out /tmp/textsFromMongo.tmp
                # read -p "Press [Enter] to continue"
                mongo --quiet looma < /var/www/html/Looma/looma\ shell\ scripts/loomaDropDatabase

            # read -p "Press [Enter] to continue"
            mongorestore --quiet --db looma /media/odroid/LOOMA/loomaupdate/Looma/mongo-dump/dump/looma/

                # read -p "Press [Enter] to continue"
                mongoimport --quiet --db looma --collection lessons    --file /tmp/lessonsFromMongo.tmp
                # read -p "Press [Enter] to continue"
                mongoimport --quiet --db looma --collection text_files --file /tmp/textsFromMongo.tmp
                # read -p "Press [Enter] to continue"
                rm /tmp/lessonsFromMongo.tmp
                rm /tmp/textsFromMongo.tmp

            result $?
        else echo "ERROR: no source dir (/media/odroid/LOOMA/loomaupdate/Looma/mongo-dump/dump/looma) for mongo restore"
        fi
    else
        echo " - - - SKIPPED: installing new Looma database"
    fi

    #       copy new files into "content" directory
    echo
    echo "- preparing to copy new files into content directory"
    echo -n  "- - continue ('y' recommended) [y/n]?"; read input;
    if [[ $input = "y" ]]
    then

        SECONDS=0

        if [ -d "content" ]
        then
          find /var/www/html/content -exec touch {} + ';'
          dosync content/  /var/www/html/content

        fi

        if [ -d "maps2018" ]
        then
           find /var/www/html/maps2018 -exec touch {} +
          dosync maps2018/ /var/www/html/maps2018
        fi
        if [ -d "ePaath" ]
        then
            find /var/www/html/ePaath -exec touch {} +
            dosync ePaath/   /var/www/html/ePaath
        fi

        echo "$(($SECONDS / 60)) minutes and $(($SECONDS % 60)) seconds elapsed."

    else
        echo " - - - SKIPPED: installing new Looma content"
    fi


# set permissions on Looma code and content

  echo "setting permissions on Looma code and content"
  chmod -R 755 /var/www/html/Looma; chmod -R 755 /var/www/html/content

    echo "$(($SECONDS / 60)) minutes and $(($SECONDS % 60)) seconds elapsed."

# end of USB section


##########################
# start Internet section
##########################

elif [[ $input = "I" ]]
then
    # test internet presence and speed
    echo "************************************"
    echo "Testing network connection and speed"
    echo "************************************"
    echo
    t=$(date +%s)
    sudo wget ftp://speedtest.tele2.net/10MB.zip -O /dev/null
    r=$?
    s=$(date +%s)
    if [[ $r -ne 0 ]]
    then
        echo "no internet connection found";exit $r;
    else
        echo "****************************************************************"
        echo -n "Internet speed is MB/s: ";expr 8 \* 10 / $(($s - $t))
        echo -n  "- - continue at this speed [y/n]?"; read input;
        if [[ $input != "y" ]]
        then
            exit 1
        fi
    fi

    #       copy current Looma code to LoomaBAK
    echo
    echo "- preparing to backup current Looma code to LoomaBAK"
    echo "-   *** usually it is OK to skip this step to save time"
    echo -n  "- - continue ('n' recommended) [y/n]?"; read input;
    if [[ $input = "y" ]]
    then
        if [ -d /var/www/html/LoomaBAK ]
        then
            echo "- deleting old LoomaBAK directory"
            sudo rm -r /var/www/html/LoomaBAK
            result $?
        fi
        sudo mv    /var/www/html/Looma   /var/www/html/LoomaBAK
        result $?
    else
        echo " - - - SKIPPED: backing up Looma code "
    fi

    #       install new Looma code
    echo
    echo "- preparing to install new Looma code"
    echo -n  "- - continue ('y' recommended) [y/n]?"; read input;

   RO="58191@usw-s008.rsync.net"

   if [[ $input = "y" ]]
    then

      SECONDS=0

      # sync Looma (code)

          dosync $RO:../Looma/   /var/www/html/Looma

        echo "$(($SECONDS / 60)) minutes and $(($SECONDS % 60)) seconds elapsed."

        #clear browser cache so the new files will be used
        source "/var/www/html/Looma/looma shell scripts/loomaClearChromiumCache"

        #       install new Looma database
        echo
        echo "****************************************************************"
        echo "- preparing to update Looma database"
        echo "-   ***note: this will NOT erase any lesson plans already in the database"
        echo -n  "- - continue ('y' recommended) [y/n]?"; read input;

        if [[ $input = "y" ]]
        then
            if [[ -d /var/www/html/Looma/mongo-dump/dump/looma ]]
            then

            # [mongorestore doesnt update existing documents that have changes]
            # to fix this, we use the following procedure:
            #     temp save locally created documents (lessons and texts)
            #     update all documents to latest version from the looma archive
            #     then re-load the locally created documents
            # mongoexport collections 'lessons' and 'text_files' to temp files
            # drop db 'looma' so mongorestore from archives will update all documents in the db
            # mongorestore db looma dump from looma archive on USB
            # finally, mongoimport the temp files to collectons 'lessons' and 'text_files' to re-instate locally created lessons and texts

                mongoexport --db looma --collection lessons    --out /tmp/lessonsFromMongo.tmp
                # read -p "Press [Enter] to continue"
                mongoexport --db looma --collection text_files --out /tmp/textsFromMongo.tmp
                # read -p "Press [Enter] to continue"
                mongo --quiet looma < /var/www/html/Looma/looma\ shell\ scripts/loomaDropDatabase

            mongorestore --quiet --db looma /var/www/html/Looma/mongo-dump/dump/looma/       # install new db changes into existing db

                # read -p "Press [Enter] to continue"
                mongoimport --db looma --collection lessons    --file /tmp/lessonsFromMongo.tmp
                # read -p "Press [Enter] to continue"
                mongoimport --db looma --collection text_files --file /tmp/textsFromMongo.tmp
                # read -p "Press [Enter] to continue"
                rm /tmp/lessonsFromMongo.tmp
                rm /tmp/textsFromMongo.tmp

            result $?
            else echo "ERROR: no source dir (/var/www/html/Looma/mongo-dump/dump/looma) for mongo restore"
            fi
        else
            echo " - - - SKIPPED: update Looma database"
        fi


    else
        echo " - - - SKIPPED: installing new Looma code"
    fi


    #       copy new files into "content" directory
    echo
    echo "- preparing to copy new files into content directory"
    echo -n  "- - continue ('y' recommended) [y/n]?"; read input;
    if [[ $input = "y" ]]
    then

       SECONDS=0

       find /var/www/html/content -exec touch {} + ';'
       dosync $RO:../content/  /var/www/html/content

  echo "setting permissions on Looma code and content"
  chmod -R 755 /var/www/html/Looma; chmod -R 755 /var/www/html/content

       echo "$(($SECONDS / 60)) minutes and $(($SECONDS % 60)) seconds elapsed."

         # maps2018/ and ePaath/ are not updated in this script
    else
        echo " - - - SKIPPED: installing new Looma content"
    fi

# end of Internet section
else
    echo "****************************************************************"
    echo 'ERROR: input must be "U" or "I"'
    echo "****************************************************************"
    exit 1
fi

echo
echo "****************************************************************"
 if [[ $1 = "dryrun" ]]
 then
    echo "DONE - LOOMA UPDATE DRY RUN:  no files were changed"
 else
    echo "DONE - LOOMA UPDATE: updating Looma code, database and content"
 fi
echo "****************************************************************"
echo
echo
echo

